{"remainingRequest":"/Users/mac/Desktop/vue-demo/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mac/Desktop/vue-demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Desktop/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/vue-demo/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/mac/Desktop/vue-demo/src/App.vue","mtime":1631207858965},{"path":"/Users/mac/Desktop/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":1624642956239},{"path":"/Users/mac/Desktop/vue-demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1631102746232},{"path":"/Users/mac/Desktop/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":1624642956239},{"path":"/Users/mac/Desktop/vue-demo/node_modules/vue-loader/lib/index.js","mtime":1631102746232},{"path":"/Users/mac/Desktop/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":1624642956239},{"path":"/Users/mac/Desktop/vue-demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1631102746232},{"path":"/Users/mac/Desktop/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":1624642956239},{"path":"/Users/mac/Desktop/vue-demo/node_modules/vue-loader/lib/index.js","mtime":1631102746232}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}